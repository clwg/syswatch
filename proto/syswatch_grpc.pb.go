// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/syswatch.proto

package syswatch

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SysWatchClient is the client API for SysWatch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SysWatchClient interface {
	BidirectionalStreamPayload(ctx context.Context, opts ...grpc.CallOption) (SysWatch_BidirectionalStreamPayloadClient, error)
	GenerateUUID(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UUIDResponse, error)
}

type sysWatchClient struct {
	cc grpc.ClientConnInterface
}

func NewSysWatchClient(cc grpc.ClientConnInterface) SysWatchClient {
	return &sysWatchClient{cc}
}

func (c *sysWatchClient) BidirectionalStreamPayload(ctx context.Context, opts ...grpc.CallOption) (SysWatch_BidirectionalStreamPayloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &SysWatch_ServiceDesc.Streams[0], "/syswatch.SysWatch/BidirectionalStreamPayload", opts...)
	if err != nil {
		return nil, err
	}
	x := &sysWatchBidirectionalStreamPayloadClient{stream}
	return x, nil
}

type SysWatch_BidirectionalStreamPayloadClient interface {
	Send(*RequestMessage) error
	Recv() (*ResponseMessage, error)
	grpc.ClientStream
}

type sysWatchBidirectionalStreamPayloadClient struct {
	grpc.ClientStream
}

func (x *sysWatchBidirectionalStreamPayloadClient) Send(m *RequestMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sysWatchBidirectionalStreamPayloadClient) Recv() (*ResponseMessage, error) {
	m := new(ResponseMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sysWatchClient) GenerateUUID(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UUIDResponse, error) {
	out := new(UUIDResponse)
	err := c.cc.Invoke(ctx, "/syswatch.SysWatch/GenerateUUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SysWatchServer is the server API for SysWatch service.
// All implementations must embed UnimplementedSysWatchServer
// for forward compatibility
type SysWatchServer interface {
	BidirectionalStreamPayload(SysWatch_BidirectionalStreamPayloadServer) error
	GenerateUUID(context.Context, *Empty) (*UUIDResponse, error)
	mustEmbedUnimplementedSysWatchServer()
}

// UnimplementedSysWatchServer must be embedded to have forward compatible implementations.
type UnimplementedSysWatchServer struct {
}

func (UnimplementedSysWatchServer) BidirectionalStreamPayload(SysWatch_BidirectionalStreamPayloadServer) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalStreamPayload not implemented")
}
func (UnimplementedSysWatchServer) GenerateUUID(context.Context, *Empty) (*UUIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateUUID not implemented")
}
func (UnimplementedSysWatchServer) mustEmbedUnimplementedSysWatchServer() {}

// UnsafeSysWatchServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysWatchServer will
// result in compilation errors.
type UnsafeSysWatchServer interface {
	mustEmbedUnimplementedSysWatchServer()
}

func RegisterSysWatchServer(s grpc.ServiceRegistrar, srv SysWatchServer) {
	s.RegisterService(&SysWatch_ServiceDesc, srv)
}

func _SysWatch_BidirectionalStreamPayload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SysWatchServer).BidirectionalStreamPayload(&sysWatchBidirectionalStreamPayloadServer{stream})
}

type SysWatch_BidirectionalStreamPayloadServer interface {
	Send(*ResponseMessage) error
	Recv() (*RequestMessage, error)
	grpc.ServerStream
}

type sysWatchBidirectionalStreamPayloadServer struct {
	grpc.ServerStream
}

func (x *sysWatchBidirectionalStreamPayloadServer) Send(m *ResponseMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sysWatchBidirectionalStreamPayloadServer) Recv() (*RequestMessage, error) {
	m := new(RequestMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SysWatch_GenerateUUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysWatchServer).GenerateUUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syswatch.SysWatch/GenerateUUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysWatchServer).GenerateUUID(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// SysWatch_ServiceDesc is the grpc.ServiceDesc for SysWatch service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SysWatch_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "syswatch.SysWatch",
	HandlerType: (*SysWatchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateUUID",
			Handler:    _SysWatch_GenerateUUID_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BidirectionalStreamPayload",
			Handler:       _SysWatch_BidirectionalStreamPayload_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/syswatch.proto",
}
